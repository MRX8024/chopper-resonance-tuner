[gcode_macro CHOPPER_TUNE]
description: Run vibration tests of chopper to calculate lowest magnitude driver registers v1.2
variable_debug: False                                                                   ; Enable debug output
variable_inset: 10                                                                      ; Offset from axis limits (mm), to determine work area limits
variable_current_change_step: 10                                                        ; Set run_current change step
variable_measure_time: 1250                                                             ; Set measure time (msec)
variable_delay: 500                                                                     ; Set delay between measurements (msec)
gcode:
    {% set current_min = params.CURRENT_MIN_MA|default('default')|string|lower %}
    {% set current_max = params.CURRENT_MAX_MA|default('default')|string|lower %}
    {% set tbl_min = params.TBL_MIN|default(0)|int %}
    {% set tbl_max = params.TBL_MAX|default(3)|int %}
    {% set toff_min = params.TOFF_MIN|default(1)|int %}
    {% set toff_max = params.TOFF_MAX|default(8)|int %}
    {% set hstrt_hend_max = params.HSTRT_HEND_MAX|default(16)|int %}
    {% set hstrt_min = params.HSTRT_MIN|default(0)|int %}
    {% set hstrt_max = params.HSTRT_MAX|default(7)|int %}
    {% set hend_min = params.HEND_MIN|default(2)|int %}
    {% set hend_max = params.HEND_MAX|default(15)|int %}
    {% set tpfd_min = params.TPFD_MIN|default(-1)|int %}
    {% set tpfd_max = params.TPFD_MAX|default(-1)|int %}
    {% set min_speed = params.MIN_SPEED|default('default')|string|lower %}
    {% set max_speed = params.MAX_SPEED|default('default')|string|lower %}
    {% set iterations = params.ITERATIONS|default(1)|int %}
    {% set travel_distance = params.TRAVEL_DISTANCE|default('default')|string|lower %}
    {% set accel_chip = params.ACCELEROMETER|default('default')|string|lower %}
    {% set find_vibr = params.FIND_VIBRATIONS|default('False')|string|lower %}
    {% set axis = params.AXIS|default('X')|string|lower %}                              ; Default axis for search its driver/s and travel direction
    {% set run_plotter = params.RUN_PLOTTER|default('True')|string|lower %}

    _detect_driver stepper={axis}
    _chop_workflow axis={axis} {rawparams}

[gcode_shell_command chop_tune]
command: ~/chopper-resonance-tuner/chopper_plot.sh
timeout: 9999.0
verbose: True

[gcode_macro _detect_driver]
description: Find which driver is used in configuration
variable_drivers: '2130', '2208', '2209', '2660', '2240', '5160'                        ; Drivers supported by Klipper
variable_driver: 0
variable_resistor: 0
gcode:
    {% set stepper = 'stepper_' + params.STEPPER|string|lower %}                        ; Import default stepper for search its driver
    {% for driver in drivers %}
        {% if 'run_current' in printer.configfile.settings['tmc' + driver + ' ' + stepper] %}
            {action_respond_info('Selected tmc%s for %s' % (driver, stepper))}
            SET_GCODE_VARIABLE MACRO=_detect_driver VARIABLE=driver VALUE={driver}
            {% if driver != '2240' %}
                {% set resistor = printer.configfile.settings['tmc' + driver + ' ' + stepper].sense_resistor %}
            {% else %}
                {% set resistor = printer.configfile.settings['tmc' + driver + ' ' + stepper].rref %}
            {% endif %}
                SET_GCODE_VARIABLE MACRO=_detect_driver VARIABLE=resistor VALUE={resistor}
        {% endif %}
    {% endfor %}

[gcode_macro _chop_apply_regs]
variable_registers: 'tbl', 'toff', 'hend', 'hstrt', 'tpfd'
variable_tbl:   -1
variable_toff:  -1
variable_hend:  -1
variable_hstrt: -1
variable_tpfd:  -1
gcode:
    {% if printer['gcode_macro _chop_apply_regs'][params.FIELD]|int != params.VALUE|int %}
        {% if printer['gcode_macro CHOPPER_TUNE'].debug %}
            M118 Setting {params.FIELD|string|lower
            } from {printer['gcode_macro _chop_apply_regs'][params.FIELD]|int} to {params.VALUE|int}
        {% endif %}
        SET_TMC_FIELD STEPPER={params.A_STEPPER|string|lower} FIELD={params.FIELD} VALUE={params.VALUE|int}
        {% if params.AWD %}
           SET_TMC_FIELD STEPPER={params.A_STEPPER|string|lower + '1'} FIELD={params.FIELD} VALUE={params.VALUE|int}
        {% endif %}
        {% if params.B_STEPPER %}
            SET_TMC_FIELD STEPPER={params.B_STEPPER|string|lower} FIELD={params.FIELD} VALUE={params.VALUE|int}
            {% if params.AWD %}
                SET_TMC_FIELD STEPPER={params.B_STEPPER|string|lower + '1'} FIELD={params.FIELD} VALUE={params.VALUE|int}
            {% endif %}
        {% endif %}
        SET_GCODE_VARIABLE MACRO=_chop_apply_regs VARIABLE={params.FIELD|string|lower} VALUE={params.VALUE|int}
    {% endif %}

[gcode_macro _chop_workflow]
description: Calculate process of CHOPPER_TUNE macro
gcode:
    {% set axis = params.AXIS|default('X')|string|lower %}
    {% set driver = printer['gcode_macro _detect_driver'].driver|string|lower %}        ; Import default driver from _detect_driver for search printer.cfg registers
    {% set sense_resistor = printer['gcode_macro _detect_driver'].resistor %}           ; Import sense_resistor from _detect_driver for postprocessing
    {% set current_min = params.CURRENT_MIN_MA|default('default')|string|lower %}       ; Import rawparams from CHOPPER_TUNE params
    {% set current_max = params.CURRENT_MAX_MA|default('default')|string|lower %}
    {% set current_change_step = printer['gcode_macro CHOPPER_TUNE'].current_change_step %}
    {% set tbl_min = params.TBL_MIN|default(0)|int %}
    {% set tbl_max = params.TBL_MAX|default(3)|int %}
    {% set toff_min = params.TOFF_MIN|default(1)|int %}
    {% set toff_max = params.TOFF_MAX|default(8)|int %}
    {% set hstrt_hend_max = params.HSTRT_HEND_MAX|default(16)|int %}
    {% set hstrt_min = params.HSTRT_MIN|default(0)|int %}
    {% set hstrt_max = params.HSTRT_MAX|default(7)|int %}
    {% set hend_min = params.HEND_MIN|default(2)|int %}
    {% set hend_max = params.HEND_MAX|default(15)|int %}
    {% set tpfd_min = params.TPFD_MIN|default(-1)|int %}
    {% set tpfd_max = params.TPFD_MAX|default(-1)|int %}
    {% set min_speed = params.MIN_SPEED|default('default')|string|lower %}
    {% set max_speed = params.MAX_SPEED|default('default')|string|lower %}
    {% set iterations = params.ITERATIONS|default(1)|int %}
    {% set travel_distance = params.TRAVEL_DISTANCE|default('default')|string|lower %}
    {% set accel_chip = params.ACCELEROMETER|default('default')|string|lower %}
    {% set find_vibr = params.FIND_VIBRATIONS|default('False')|string|lower %}
    {% set run_plotter = params.RUN_PLOTTER|default('True')|string|lower %}
    {% set trv_speed = printer.configfile.settings.printer.max_velocity / 2 * 60|int %} ; Idle movements speed
    {% set inset = printer['gcode_macro CHOPPER_TUNE'].inset %}
    {% set acceleration = printer.configfile.settings.printer.max_accel|int %}
    {% set measure_time = printer['gcode_macro CHOPPER_TUNE'].measure_time / 1000|float %}
    {% set delay = printer['gcode_macro CHOPPER_TUNE'].delay|int %}
    {% set kinematics = printer.configfile.settings.printer.kinematics|string %}

    ; Select main and secondary axis / stepper, their requirements
    {% if kinematics == 'corexy' %}
        {% if axis == 'x' %}
            {% set b_axis = 'y' %}
        {% elif axis == 'y' %}
            {% set b_axis = 'x' %}
        {% else %}
            {action_raise_error('WARNING!!! Incorrect direction')}
        {% endif %}
        {% set a_stepper = 'stepper_x' %}
        {% set b_stepper = 'stepper_y' %}
        {% set c_stepper = '' %}

    {% elif kinematics == 'cartesian' %}
        {% if axis == 'x' %}
            {% set b_axis = 'y' %}
            {% set a_stepper = 'stepper_x' %}
            {% set b_stepper = '' %}
            {% set c_stepper = '' %}
        {% elif axis == 'y' %}
            {% set b_axis = 'x' %}
            {% set a_stepper = 'stepper_y' %}
            {% set b_stepper = '' %}
            {% set c_stepper = '' %}
        {% else %}
            {action_raise_error('WARNING!!! Incorrect direction')}
        {% endif %}

    {% elif kinematics == 'delta' %}
        {% if axis == 'z' %}
            {% set b_axis = 'z' %}
            {% set a_stepper = 'stepper_a' %}
            {% set b_stepper = 'stepper_b' %}
            {% set c_stepper = 'stepper_c' %}
        {% else %}
            {action_raise_error('WARNING!!! Incorrect direction')}
        {% endif %}
    {% else %}
        {action_raise_error('WARNING!!! Script does not support your kinematics')}
    {% endif %}

    {% set minAX = printer.configfile.settings[a_stepper].position_min|float + inset %}   ; Axis positions
    {% set maxAX = printer.configfile.settings[a_stepper].position_max|float - inset %}
    {% set midBAX = ((printer.configfile.settings['stepper_' + b_axis].position_max|float - inset) -
     (printer.configfile.settings['stepper_' + b_axis].position_min|float + inset)) / 2 %}

    ; Error TPFD on unsupported drivers and values
    {% if tpfd_min != -1 or tpfd_max != -1 %}
        {% if driver == '5160' or driver == '2240' %}
            {% if tpfd_min < 0 or tpfd_max < 0 %}
                {action_raise_error('WARNING!!! Incorrect TPFD values')}
            {% endif %}
        {% else %}
            {action_raise_error('WARNING!!! TMC%s not support register TPFD' % (driver))}
        {% endif %}
    {% endif %}

    ; Reseting variables with registers
    {% for register in printer['gcode_macro _chop_apply_regs'].registers %}
        SET_GCODE_VARIABLE MACRO=_chop_apply_regs VARIABLE={register|string|lower} VALUE=-1
    {% endfor %}

    ; Select accelerometer
    {% if accel_chip == 'default' %}
        {% if 'accel_chip' in printer.configfile.settings.resonance_tester %}
            {% set accel_chip = printer.configfile.settings.resonance_tester.accel_chip %}
        {% else %}
            {% set accel_chip = 'adxl345' %} ; Default accelerometer
        {% endif %}
    {% endif %}
    {action_respond_info('Selected %s for accelerometer' % (accel_chip))}

    ; Detect 2/4wd config
    {% if 'dir_pin' in printer.configfile.settings[a_stepper + '1'] %}
        {% set awd = 1 %}
        {action_respond_info('Selected 4wd configuration')}
    {% else %}
        {action_respond_info('Selected 2wd configuration')}
    {% endif %}

    ; Select run_current
    {% if current_min == 'default' %}
        {% set current_min = (printer.configfile.settings['tmc' + driver + ' ' + a_stepper].run_current * 1000)|int %}
        {% if printer['gcode_macro CHOPPER_TUNE'].debug %}
            {action_respond_info('Set default run_current: %d mA to run_current_min' % (current_min))}
        {% endif %}
    {% else %}
        {% set current_min = current_min|int %}
    {% endif %}
    {% if current_max == 'default' %}
        {% set current_max = (printer.configfile.settings['tmc' + driver + ' ' + a_stepper].run_current * 1000)|int %}
        {% if printer['gcode_macro CHOPPER_TUNE'].debug %}
            {action_respond_info('Set default run_current: %d mA to run_current_max' % (current_max))}
        {% endif %}
    {% else %}
        {% set current_max = current_max|int %}
    {% endif %}

    ; In vibration measurement mode, search and takes registers from printer.cfg, set speed range
    {% if find_vibr == 'true' or find_vibr == '1' %}
        {% set current_max = current_min %}
        {% set tbl_min = printer.configfile.settings['tmc' + driver + ' ' + a_stepper].driver_tbl %}
        {% set tbl_max = tbl_min %}
        {% set toff_min = printer.configfile.settings['tmc' + driver + ' ' + a_stepper].driver_toff %}
        {% set toff_max = toff_min %}
        {% set hstrt_min = printer.configfile.settings['tmc' + driver + ' ' + a_stepper].driver_hstrt %}
        {% set hstrt_max = hstrt_min %}
        {% set hend_min = printer.configfile.settings['tmc' + driver + ' ' + a_stepper].driver_hend %}
        {% set hend_max = hend_min %}
        {% if min_speed == 'default' %}
            {% set min_speed = 25|int %}
        {% else %}
            {% set min_speed = min_speed|int %}
        {% endif %}
        {% if max_speed == 'default' %}
            {% set max_speed = (((-acceleration * measure_time + ((acceleration * measure_time) ** 2 +
             4 * acceleration * (maxAX - minAX)) ** 0.5) / 2), 100)|min|float %}
        {% else %}
            {% set max_speed = max_speed|int %}
        {% endif %}
    {% else %}
        ; Protect not defined speed & converting str -> int
        {% if min_speed == 'default' or max_speed == 'default' %}
            {action_raise_error('WARNING!!! Resonance speed must be defined')}
        {% endif %}
        {% set min_speed, max_speed = min_speed|int, max_speed|int %}
    {% endif %}

    ; Calculate min required toolhead travel distance from speed, acceleration and time
    {% set accel_decel_distance = max_speed ** 2 / acceleration %}
    {% set auto_travel_distance = accel_decel_distance + (max_speed * measure_time) %}
    {% if printer['gcode_macro CHOPPER_TUNE'].debug %}
        {action_respond_info('Acceleration & deceleration zone = %f mm' % (accel_decel_distance))}
        {action_respond_info('Auto calculated min required travel distance = %f mm' % (auto_travel_distance))}
    {% endif %}

    ; Protect exceeding axis limits & calculate travel distance
    {% if travel_distance == 'default' %}
        {% if minAX + auto_travel_distance > maxAX %}
            {action_raise_error('WARNING!!! Required toolhead travel distance'
             ' (%.2f mm) is longer than kinematics allows, please lower'
              ' speed or increase acceleration' % (auto_travel_distance))}
        {% endif %}
        {% set travel_distance = auto_travel_distance %}
    {% else %}
        {% set travel_distance = travel_distance|int %}
        {% if minAX + travel_distance > maxAX %}
            {% set travel_distance = maxAX - minAX %}
            {% if travel_distance < auto_travel_distance %}
                {action_raise_error('WARNING!!! Toolhead travel distance is less'
                 ' than it should be, please increase acceleration or lower speed')}
            {% else %}
                {action_respond_info('WARNING!!! Your travel distance'
                 ' is longer than kinematics allows, lowering...')}
            {% endif %}
        {% else %}
            {% if travel_distance < auto_travel_distance %}
                {% set travel_distance = auto_travel_distance %}
                {% if minAX + auto_travel_distance > maxAX %}
                    {action_raise_error('WARNING!!! Your travel distance is less than'
                     ' required (%.2f mm), and longer than kinematics allows, please lower'
                      ' speed or increase acceleration' % (auto_travel_distance))}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}

    ; Info message
    {% if find_vibr == 'true' or find_vibr == '1' %}
        {action_respond_info('Final max travel distance = %.2f mm, position min = %.2f, traveling: %.2f --> %.2f' %
         (travel_distance, minAX, minAX, travel_distance + minAX))}
        {action_respond_info('Start find vibration mode, speed: %d --> %d mm/s current=%d TBL=%d TOFF=%d'
         ' HSTRT=%d HEND=%d' % (min_speed, max_speed, current_min, tbl_min, toff_min, hstrt_min, hend_min))}
    {% else %}
        {action_respond_info('Final travel distance = %.2f mm, position min = %.2f, traveling: %.2f --> %.2f' %
         (travel_distance, minAX, minAX, travel_distance + minAX))}
        {action_respond_info('Start of register enumeration mode, speed: %d --> %d mm/s current: %d'
         ' --> %d mA iterations=%d TBL: %d --> %d TOFF: %d --> %d HSTRT: %d --> %d HEND: %d --> %d TPFD:'
          ' %d --> %d' % (min_speed, max_speed, current_min, current_max, iterations, tbl_min, tbl_max,
             toff_min, toff_max, hstrt_min, hstrt_max, hend_min, hend_max, tpfd_min, tpfd_max))}
    {% endif %}

    ; Check for axis homing
    {% if not 'xy' in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}

    SET_VELOCITY_LIMIT ACCEL={acceleration}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={acceleration}
    G0 {axis}{minAX} {b_axis}{midBAX} F{trv_speed}                                      ; Move to the initial position
    RUN_SHELL_COMMAND CMD=chop_tune PARAMS='cleaner'                                    ; Clean csv files
    ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=stand_still
    G4 P5000
    ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=stand_still
    {% for t_current in range(current_min, current_max + 1, current_change_step) %}     ; Set steps of run_current
        {% set current = t_current / 1000.0 %}                                          ; Set the current value
        SET_TMC_CURRENT STEPPER={a_stepper} CURRENT={current}
        {% if b_stepper %}
            SET_TMC_CURRENT STEPPER={b_stepper} CURRENT={current}
        {% endif %}
        {% if awd %}
            SET_TMC_CURRENT STEPPER={a_stepper + '1'} CURRENT={current}
            {% if b_stepper %}
                SET_TMC_CURRENT STEPPER={b_stepper + '1'} CURRENT={current}
            {% endif %}
        {% endif %}
        {% for tbl in range(tbl_min, tbl_max + 1) %}                                     ; Set tbl values
            _chop_apply_regs awd={awd} a_stepper={a_stepper} b_stepper={b_stepper} field=tbl value={tbl}
            {% for toff in range(toff_min, toff_max + 1) %}                              ; Set toff values
                 _chop_apply_regs awd={awd} a_stepper={a_stepper} b_stepper={b_stepper} field=toff value={toff}
                {% for hstrt_value in range(hstrt_min, hstrt_max + 1) %}
                    {% for hend_value in range(hend_min, hend_max + 1) %}
                        {% if hend_value + hstrt_value <= hstrt_hend_max %}              ; Set hend, and hstrt values
                            _chop_apply_regs awd={awd} a_stepper={a_stepper} b_stepper={b_stepper} field=hend value={hend_value}
                            _chop_apply_regs awd={awd} a_stepper={a_stepper} b_stepper={b_stepper} field=hstrt value={hstrt_value}
                            {% for tpfd in range(tpfd_min, tpfd_max + 1) %}              ; Set tpfd values
                                {% if tpfd_min != -1 and tpfd_max != -1 %}
                                    _chop_apply_regs awd={awd} a_stepper={a_stepper} b_stepper={b_stepper} field=tpfd value={tpfd}
                                {% endif %}
                                DUMP_TMC STEPPER={a_stepper} REGISTER=chopconf          ; Dump TMC settings
                                {% for speed in range(min_speed, max_speed|int + 1) %}
                                    {% for i in range(iterations) %}
                                        {% if find_vibr == 'true' or find_vibr == '1' %}
                                            {% set travel_distance  = (travel_distance / max_speed) * speed %}
                                            G4 P{delay}
                                            M118 Speed {speed} mm/s on {travel_distance|round(2)|float} mm
                                        {% endif %}
                                        ACCELEROMETER_MEASURE CHIP={accel_chip}         ; Start accelerometer data collection
                                        G0 {axis}{minAX + travel_distance} F{speed*60}  ; Movement
                                        ACCELEROMETER_MEASURE CHIP={accel_chip}         ; Stop accelerometer data collection
                                        G0 {axis}{minAX} F{trv_speed}                   ; Move to the initial position
                                        M400
                                    {% endfor %}
                                {% endfor %}
                            {% endfor %}
                        {% endif %}
                    {% endfor %}
                {% endfor %}
            {% endfor %}
        {% endfor %}
    {% endfor %}

    {% if tpfd_min == -1 or tpfd_max == -1 %}
        {% set tpfd_min, tpfd_max = 0, 0 %}
    {% endif %}

    G4 P500
    G0 {axis}{((printer.configfile.settings['stepper_' + axis].position_max|float - inset) -
     (printer.configfile.settings['stepper_' + axis].position_min|float + inset)) / 2} F{trv_speed}
    {% if run_plotter == 'true' or run_plotter == '1' %}
        RUN_SHELL_COMMAND CMD=chop_tune PARAMS='{'current_min_ma=%d current_max_ma=%d current_change_step=%d tbl_min=%d tbl_max=%d toff_min=%d toff_max=%d hstrt_hend_max=%d hstrt_min=%d hstrt_max=%d'
        ' hend_min=%d hend_max=%d tpfd_min=%d tpfd_max=%d min_speed=%d max_speed=%d iterations=%d accel_chip=%s driver=%s sense_resistor=%f'%(current_min|int, current_max|int, current_change_step,
           tbl_min, tbl_max, toff_min, toff_max, hstrt_hend_max, hstrt_min, hstrt_max, hend_min, hend_max, tpfd_min, tpfd_max, min_speed, max_speed, iterations, accel_chip, driver, sense_resistor)}' ; export data to processing
        M118 For run parser manually type - RUN_SHELL_COMMAND CMD=chop_tune PARAMS='{'current_min_ma=%d current_max_ma=%d current_change_step=%d tbl_min=%d tbl_max=%d toff_min=%d toff_max=%d hstrt_hend_max=%d hstrt_min=%d'
        ' hstrt_max=%d hend_min=%d hend_max=%d tpfd_min=%d tpfd_max=%d min_speed=%d max_speed=%d iterations=%d accel_chip=%s driver=%s sense_resistor=%f'%(current_min|int, current_max|int, current_change_step,
           tbl_min, tbl_max, toff_min, toff_max, hstrt_hend_max, hstrt_min, hstrt_max, hend_min, hend_max, tpfd_min, tpfd_max, min_speed, max_speed, iterations, accel_chip, driver, sense_resistor)}' ; output data info
    {% endif %}
